/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    distribution
    id("de.inetsoftware.setupbuilder") version "7.2.16"
    id("org.openjfx.javafxplugin") version "0.0.13"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.2")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:30.1.1-jre")

    implementation("org.openjfx:javafx:20-ea+11")

}

application {
    // Define the main class for the application.
    mainClass.set("acnh_hourly.App")
}

javafx {
    version = "19"
    modules("javafx.controls", "javafx.media")
}

/*
dependencies {
    "implementation"("org.openjfx:javafx:14")
}
*/

/*
distributions {
    main {
    distributionBaseName.set("ACNH Hourly")
        //distributionClassifier.set("acnhh")
        contents {
            into ("resources") {from("resources")}
        }
    }
}
*/



/*
tasks.jar {
    manifest.attributes["Main-Class"] = "acnh_hourly.app"
    val dependencies = configurations
        .runtimeClasspath
        .get()
        .map(::zipTree) // OR .map { zipTree(it) }
    from(dependencies)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
} 
*/


/*
tasks {
    val fatJar = register<Jar>("fatJar") {
        dependsOn.addAll(listOf("compileJava", "compileKotlin", "processResources")) // We need this for Gradle optimization to work
        archiveClassifier.set("acnh_hourly") // Naming the jar
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest { attributes(mapOf("Main-Class" to application.mainClass)) } // Provided we set it up in the application plugin configuration
        val sourcesMain = sourceSets.main.get()
        val contents = configurations.runtimeClasspath.get()
            .map { if (it.isDirectory) it else zipTree(it) } +
                sourcesMain.output
        from(contents)
    }
    
    build {
        dependsOn(fatJar) // Trigger fat jar creation during build
    }
    
}
*/
/*
setupBuilder {
    vendor          = "Cici"
    copyright       = "Copyright Â© 2023 Cici"
    description     = "ACNH hourly music player"

    icons = "src/main/resources/icon.icns"

    from ("fatJar")

    mainClass = "acnh_hourly.App"
    mainJar = "acnh_hourly.jar"

    desktopStarter {

        displayName   = "ACNH Hourly" // the name of the program when installed

        description   = "plays hourly acnh music"

        // The working directory of the service, relative to installation root
        workDir        = "."
    }
}
*/

/* 
tasks {
    "dmg" (Task::class) {
        //setupIcon = "src/main/resources/icon.icns"
    }

    "msi" (Task::class) {
        setupBuilder.desktopStarter {
            displayName = "ACNH Hourly"
            executable = "acnh_hourly.jar"
        }
    }
}
*/


tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourceSets {
    main {
        resources {
            srcDirs("src/main/resources")
        }
    }
}
